From 354fd3b39469801b326a329ccc5d7ede7a26a8cc Mon Sep 17 00:00:00 2001
From: Tech-Vexy <eveliaveldrine@outlook.com>
Date: Tue, 14 Nov 2023 17:09:56 +0300
Subject: [PATCH] Edit App.tsx Graph.tsx

---
 myvenv/bin/python     |  1 +
 myvenv/bin/python3    |  1 +
 myvenv/bin/python3.10 |  1 +
 myvenv/lib64          |  1 +
 myvenv/pyvenv.cfg     |  3 +++
 src/App.tsx           | 19 +++++++++++++++----
 src/Graph.tsx         | 12 ++++++++++--
 7 files changed, 32 insertions(+), 6 deletions(-)
 create mode 120000 myvenv/bin/python
 create mode 120000 myvenv/bin/python3
 create mode 120000 myvenv/bin/python3.10
 create mode 120000 myvenv/lib64
 create mode 100644 myvenv/pyvenv.cfg

diff --git a/myvenv/bin/python b/myvenv/bin/python
new file mode 120000
index 0000000..b8a0adb
--- /dev/null
+++ b/myvenv/bin/python
@@ -0,0 +1 @@
+python3
\ No newline at end of file
diff --git a/myvenv/bin/python3 b/myvenv/bin/python3
new file mode 120000
index 0000000..ae65fda
--- /dev/null
+++ b/myvenv/bin/python3
@@ -0,0 +1 @@
+/usr/bin/python3
\ No newline at end of file
diff --git a/myvenv/bin/python3.10 b/myvenv/bin/python3.10
new file mode 120000
index 0000000..b8a0adb
--- /dev/null
+++ b/myvenv/bin/python3.10
@@ -0,0 +1 @@
+python3
\ No newline at end of file
diff --git a/myvenv/lib64 b/myvenv/lib64
new file mode 120000
index 0000000..7951405
--- /dev/null
+++ b/myvenv/lib64
@@ -0,0 +1 @@
+lib
\ No newline at end of file
diff --git a/myvenv/pyvenv.cfg b/myvenv/pyvenv.cfg
new file mode 100644
index 0000000..266b907
--- /dev/null
+++ b/myvenv/pyvenv.cfg
@@ -0,0 +1,3 @@
+home = /usr/bin
+include-system-site-packages = false
+version = 3.10.6
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..b9a6dde 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,19 +31,28 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
+    let x=0;
+    const interval=setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
+      this.setState({ data: serverResponds,showGraph: true });
     });
-  }
+    x++;
+    if (x>1000) {
+      clearInterval(interval);
+    }
+  },100);
+}
 
   /**
    * Render the App react component
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..0fabbd7 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,15 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem  = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    elem.setAttribute('view','y_line');
+    elem.setAttribute('column-pivots','["stock"]');
+    elem.setAttribute('row-pivots','["timestamp"]');
+    elem.setAttribute('columns','["top_ask_price"]');
+    elem.setAttribute('aggregates',`{"stock": "distinct count",
+    "top_ask_price":"avg",
+    "top_bid_price":"avg",
+    "timestamp":"distinct count"}`);
 
     const schema = {
       stock: 'string',
-- 
2.34.1

